name: Deploy POC

on:
  workflow_dispatch:
    inputs:
      resourcePrefix:
        default: 'contoso'
        required: true
        description: 'Resource Prefix'
      clusterName:
        default: 'aks'
        required: true
        description: 'Name of the AKS Cluster'
      aksAdminGroupIds:
        required: false
        description: 'Comma-separated list of AAD group IDs'
      location:
        required: true
        type: choice
        description: 'Resource Location'
        default: westus2
        options:
          - westus2
          - canadacentral
      
jobs:
  deploy-poc:
    name: 'Deploy POC'
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Generate Resource Group Name
        id: generate
        run: |
          let "randomIdentifier=$RANDOM*$RANDOM"
          echo "randomIdentifier=$randomIdentifier" >> $GITHUB_ENV 
          echo "resourceGroupName=poc-autoscaling-gh-$randomIdentifier" >> $GITHUB_ENV

      - name: Parse AAD Group IDs to Json
        id: parse
        env:
          AKS_ADMIN_GROUP_IDS: ${{ github.event.inputs.aksAdminGroupIds }}
        run: |
          adGroupIds=$(echo $AKS_ADMIN_GROUP_IDS | tr "," "\n")
          adGroupIdsJson=$(jq -n --arg inarr "${adGroupIds}" '$inarr | split("\n")' --compact-output)
          echo $adGroupIdsJson > $GITHUB_WORKSPACE/adGroupIds.json

      - name: Login to Azure
        id: login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validate Bicep Templates
        id: validate
        uses: Azure/cli@v1
        env:
          DEPLOY_LOCATION: ${{ github.event.inputs.location }}
          RANDOM_IDENTIFIER: ${{ env.randomIdentifier }}
          NODE_ADMIN_PASSWORD: ${{ secrets.NODE_ADMIN_PASSWORD }}
        with:
          inlineScript: |
            az deployment sub validate \
              --name poc-deployment-$RANDOM_IDENTIFIER \
              --template-file ./infrastructure/aks/main.bicep \
              --location $DEPLOY_LOCATION \
              --parameters resourcePrefix=${{ github.event.inputs.resourcePrefix }} \
              --parameters resourceGroupName=${{ env.resourceGroupName }} \
              --parameters clusterName=${{ github.event.inputs.clusterName }} \
              --parameters adminGroupObjectIDs=@$GITHUB_WORKSPACE/adGroupIds.json \
              --parameters nodeAdminPassword=$NODE_ADMIN_PASSWORD

      - name: Run a Dry-Run Deployment
        id: dryrun
        uses: Azure/cli@v1
        env:
          DEPLOY_LOCATION: ${{ github.event.inputs.location }}
          RANDOM_IDENTIFIER: ${{ env.randomIdentifier }}
          NODE_ADMIN_PASSWORD: ${{ secrets.NODE_ADMIN_PASSWORD }}
        with:
          inlineScript: |
            az deployment sub create \
              --name poc-deployment-$RANDOM_IDENTIFIER \
              --template-file ./infrastructure/aks/main.bicep \
              --location $DEPLOY_LOCATION \
              --parameters resourcePrefix=${{ github.event.inputs.resourcePrefix }} \
              --parameters resourceGroupName=${{ env.resourceGroupName }} \
              --parameters clusterName=${{ github.event.inputs.clusterName }} \
              --parameters adminGroupObjectIDs=@$GITHUB_WORKSPACE/adGroupIds.json \
              --parameters nodeAdminPassword=$NODE_ADMIN_PASSWORD \
              --what-if
      - name: Deploy AKS
        id: deploy
        uses: Azure/cli@v1
        env:
          DEPLOY_LOCATION: ${{ github.event.inputs.location }}
          RANDOM_IDENTIFIER: ${{ env.randomIdentifier }}
          NODE_ADMIN_PASSWORD: ${{ secrets.NODE_ADMIN_PASSWORD }}
        with:
          inlineScript: |
            az deployment sub create \
              --name poc-deployment-$RANDOM_IDENTIFIER \
              --template-file ./infrastructure/aks/main.bicep \
              --location $DEPLOY_LOCATION \
              --parameters resourcePrefix=${{ github.event.inputs.resourcePrefix }} \
              --parameters resourceGroupName=${{ env.resourceGroupName }} \
              --parameters clusterName=${{ github.event.inputs.clusterName }} \
              --parameters adminGroupObjectIDs=@$GITHUB_WORKSPACE/adGroupIds.json \
              --parameters nodeAdminPassword=$NODE_ADMIN_PASSWORD \

            echo "::set-output name=clusterName::$(az deployment sub show -n poc-deployment-$RANDOM_IDENTIFIER --query properties.outputs.clusterName.value)"
      
      - name: Configure Actions Runner Controller
        env:
          CLUSTER_NAME: ${{ steps.deploy.outputs.clusterName }}
          RESOURCE_GROUP: ${{ env.resourceGroupName }}
          GH_APP_ID: ${{ secrets.GH_APP_ID }}
          GH_INSTALLATION_ID: ${{ secrets.GH_INSTALLATION_ID }}
          GH_PRIVATE_KEY: ${{ secrets.GH_PRIVATE_KEY }}
        run: |
          az aks wait --created --timeout 120 --name $CLUSTER_NAME --resource-group $RESOURCE_GROUP 
          az aks get-credentials --admin --name $CLUSTER_NAME --resource-group $RESOURCE_GROUP
                   
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.8.0/cert-manager.yaml         
          
          kubectl apply -f https://github.com/actions-runner-controller/actions-runner-controller/releases/download/v0.22.0/actions-runner-controller.yaml
          
          kubectl create secret generic controller-manager \
                -n actions-runner-system \
                --from-literal=github_app_id=$GH_APP_ID \
                --from-literal=github_app_installation_id=$GH_INSTALLATION_ID \
                --from-literal=github_app_private_key=$GH_PRIVATE_KEY

      - name: Destroy AKS
        if: ${{ failure() && steps.deploy.conclusion == 'failure' }}
        uses: Azure/cli@v1
        env:
          RANDOM_IDENTIFIER: ${{ env.randomIdentifier }}
        with:
          inlineScript: |
            az deployment sub delete \
              --name poc-deployment-$RANDOM_IDENTIFIER

